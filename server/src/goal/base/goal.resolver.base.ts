/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGoalArgs } from "./CreateGoalArgs";
import { UpdateGoalArgs } from "./UpdateGoalArgs";
import { DeleteGoalArgs } from "./DeleteGoalArgs";
import { GoalFindManyArgs } from "./GoalFindManyArgs";
import { GoalFindUniqueArgs } from "./GoalFindUniqueArgs";
import { Goal } from "./Goal";
import { TodoFindManyArgs } from "../../todo/base/TodoFindManyArgs";
import { Todo } from "../../todo/base/Todo";
import { User } from "../../user/base/User";
import { GoalService } from "../goal.service";

@graphql.Resolver(() => Goal)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GoalResolverBase {
  constructor(
    protected readonly service: GoalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  async _goalsMeta(
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Goal])
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  async goals(@graphql.Args() args: GoalFindManyArgs): Promise<Goal[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Goal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "own",
  })
  async goal(@graphql.Args() args: GoalFindUniqueArgs): Promise<Goal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Goal)
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "create",
    possession: "any",
  })
  async createGoal(@graphql.Args() args: CreateGoalArgs): Promise<Goal> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Goal)
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "update",
    possession: "any",
  })
  async updateGoal(@graphql.Args() args: UpdateGoalArgs): Promise<Goal | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Goal)
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "delete",
    possession: "any",
  })
  async deleteGoal(@graphql.Args() args: DeleteGoalArgs): Promise<Goal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Todo])
  @nestAccessControl.UseRoles({
    resource: "Todo",
    action: "read",
    possession: "any",
  })
  async todos(
    @graphql.Parent() parent: Goal,
    @graphql.Args() args: TodoFindManyArgs
  ): Promise<Todo[]> {
    const results = await this.service.findTodos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Goal): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
